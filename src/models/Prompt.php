<?php

namespace vaersaagod\aimate\models;

use craft\base\ElementInterface;
use craft\base\Model;
use craft\helpers\StringHelper;

use http\Exception\RuntimeException;
use Illuminate\Support\Collection;

use vaersaagod\aimate\AIMate;
use vaersaagod\aimate\helpers\OpenAiHelper;

class Prompt extends Model
{

    /** @var string|null The input text, if any */
    public ?string $text = null;

    /** @var ElementInterface|null */
    public ?ElementInterface $element = null;

    /** @var PromptConfig */
    private PromptConfig $config;

    /** @var string */
    private string $directives = '';

    /**
     * @return array
     */
    public function rules(): array
    {
        $rules = parent::rules();
        $rules[] = ['text', 'required', 'when' => function ($model) {
            return str_contains($model->config->template ?? '', '<text>');
        }];
        return $rules;
    }

    public function validate($attributeNames = null, $clearErrors = true)
    {
        return parent::validate($attributeNames, $clearErrors); // TODO: Change the autogenerated stub
    }

    /**
     * @return string
     */
    public function getHandle(): string
    {
        return $this->config->handle;
    }

    /**
     * @return string
     * @throws \Throwable
     * @throws \yii\base\Exception
     */
    public function getPrompt(): string
    {

        // Get template
        $template = $this->config->template;

        // Replace text tokens
        $template = str_replace('<text>', $this->text ?? '', $template);

        // Render the prompt as an object template, in case we have an element
        $prompt = \Craft::$app->getView()->renderObjectTemplate($template, $this->element);

        // Parse the directives
        $this->directives = '';
        $directives = [];

        // Figure out the max number of words we want
        $maxWords = $this->getMaxWords();
        if ($maxWords) {
            $directives[] = "In about $maxWords words or less";
        }

        // Retain HTML?
        if ($this->getIsHtml()) {
            $directives[] = 'preserving HTML tags';
        }

        if (empty($directives)) {
            return $prompt;
        }

        $this->directives = implode(' and ', $directives);

        return implode(', ', [$this->directives, $prompt]);

    }

    /**
     * @param PromptConfig $config
     * @return void
     */
    public function setConfig(PromptConfig $config): void
    {
        $this->config = $config;
    }

    /**
     * @return bool
     */
    public function getIsHtml(): bool
    {
        return StringHelper::isHtml($this->text ?? '') || StringHelper::isHtml($this->template ?? '');
    }

    /**
     * @return int|null
     */
    public function getMaxWords(): ?int
    {
        $maxWords = $this->config->maxWords;
        if (empty($maxWords) && $maxWords !== false && !empty($this->text)) {
            $maxWords = StringHelper::countWords($this->text);
        }
        if (!$maxWords) {
            return null;
        }
        $multiplier = $this->config->maxWordsMultiplier ?? AIMate::getInstance()->getSettings()->maxWordsMultiplier;
        if (!empty($multiplier)) {
            return round($maxWords * $multiplier);
        }
        return $maxWords;
    }

    /**
     * @return string
     */
    public function getModel(): string
    {
        return $this->config->model ?? AIMate::getInstance()->getSettings()->model;
    }

    /**
     * @return float
     */
    public function getTemperature(): float
    {
        return $this->config->temperature ?? AIMate::getInstance()->getSettings()->temperature ?? 0.7;
    }

    /**
     * @return string|null
     * @throws \Throwable
     * @throws \yii\base\Exception
     */
    public function complete(): ?string
    {
        $client = OpenAiHelper::getClient();
        $prompt = $this->getPrompt();
        $params = [
            'model' => $this->getModel(),
            'temperature' => $this->getTemperature(),
            'messages' => [
                ['role' => 'user', 'content' => $prompt],
            ],
        ];
        $result = $client->chat()->create($params);
        $response = Collection::make($result['choices'] ?? [])
            ->first(static fn(array $choice) => $choice['finish_reason'] === 'stop' && !empty($choice['message']['content'] ?? null));
        if (!$response) {
            return null;
        }
        $message = trim($response['message']['content']);
        if (!empty($this->directives)) {
            $message = StringHelper::removeLeft($message, $this->directives);
            $message = StringHelper::removeRight($message, $this->directives);
        }
        return trim($message) ?: null;
    }

}

{% import '_includes/forms.twig' as forms %}

{% set settings = craft.app.plugins.plugin('_aimate').settings %}
{% set prompts = settings.prompts|default([]) %}

{% js %}

$(() => {

    const executePrompt = (text, prompt, params) => {
        return Craft.sendActionRequest(
            'POST',
            '_aimate/default/do-prompt',
            {
                data: { text, prompt, ...params }
            }
        );
    };

    const onPromptClick = e => {
        e.preventDefault();
        const { currentTarget: promptLink } = e;
        const menu = promptLink.closest('[data-aimate-menu]');
        const menuButton = document.querySelector(`button[aria-controls="${menu.id}"]`);
        if (menuButton.classList.contains('loading')) {
            return;
        }
        $(menuButton).trigger('click');
        const { field: fieldId, element: elementId, site: siteId } = menuButton.dataset;
        const input = menuButton.closest('.input').querySelector('input,textarea');
        if (!input) {
            Craft.cp.displayError('No input');
            return;
        }
        // if (promptLink.hasAttribute('data-custom')) {
        //     alert('custom prompt!'); // TODO
        //     return;
        // }
        const { prompt } = promptLink.dataset;
        if (!prompt) {
            Craft.cp.displayError('No prompt');
            return;
        }
        const elementEditor = $(input.closest('[data-element-editor]')).data('elementEditor');
        let params = {
            elementId, siteId
        };
        if (elementEditor) {
            params = {
                ...params,
                draftId: elementEditor.settings.draftId,
                isProvisionalDraft: elementEditor.settings.isProvisionalDraft
            };
        }
        menuButton.classList.add('loading');
        executePrompt(input.value, prompt, params)
            .then(res => {
                const { data } = res;
                if (!data.text) {
                    return;
                }
                const field = input.closest('.field');
                const { type: fieldType } = field.dataset;
                if (fieldType === 'craft\\ckeditor\\Field') {
                    const editable = field.querySelector('.ck-editor__editable');
                    const ckEditorInstance = editable ? editable.ckeditorInstance : null;
                    if (!ckEditorInstance) {
                        throw new Error('Unable to find CKEditor instance in DOM');
                    }
                    ckEditorInstance.setData(data.text);
                    ckEditorInstance.focus();
                } else if (fieldType === 'craft\\redactor\\Field') {
                    $R(`#${input.id}`, 'source.setCode', data.text);
                } else {
                    input.value = data.text;
                    input.focus();
                }
                if (elementEditor) {
                    elementEditor.checkForm();
                }
            })
            .catch(({response}) => {
                Craft.cp.displayError(response.data.message);
            })
            .then(() => {
                menuButton.classList.remove('loading');
                input.focus();
            });
    };

    $('body').on('click', '[data-aimate-menu] a', onPromptClick);

});

{% endjs %}

{% css %}
    .field:has(.aimate) input.nicetext {
        padding-right: 70px;
    }
{% endcss %}

<div class="aimate" style="position:absolute;right:0;top:0;">
    {{ forms.button({
        spinner: true,
        label: 'ðŸ’¡',
        class: 'menubtn',
        attributes: {
            'data-aimate': true,
            'data-field': field.id,
            'data-element': element.id|default,
            'data-site': element.siteId|default,
            'aria-label': 'Click to open the AIMate prompt menu'|t('_aimate'),
            'aria-controls': "aimate-prompts-menu-#{field.id}",
            'data-disclosure-trigger': true
        }
    }) }}
    <div id="aimate-prompts-menu-{{ field.id }}" class="menu" data-align="right" data-aimate-menu>
        <ul>
            {% for prompt in prompts %}
                <li>
                    <a href="#" data-prompt="{{ prompt.handle }}">{{ prompt.name }}</a>
                </li>
            {% endfor %}
        </ul>
        {# TODO
        <hr/>
    <ul>
        <li>
            <a href="#" data-custom>{{ 'Custom prompt...'|t('_aimate') }}</a>
        </li>
    </ul>
        #}
    </div>
</div>
